#!/usr/bin/env node

/**
 * bin/launchchimp-daemon
 */

// Everything above this line will be executed twice
require('daemon')();

var cluster = require('cluster');

// Number of CPUs
var numCPUs = require('os').cpus().length;

/**
 * Creates a new worker when running as cluster master.
 * Runs the Launchchimp service otherwise
 */
function createWorker() {
  if (cluster.isMaster) {
    // Fork a worker if running as cluster master
    var child = cluster.fork();

    // Respawn the child process after exit
    // (ex. in case of an uncaught exception)
    child.on('exit', function (code, signal) {
      createWorker();
    });
  } else {
    // Run the service if running as worker
    var service = require('../lib/launchchimp');

    var options = {
      freq: process.env.LAUNCHCHIMP_POLL_FREQUENCY || 600000,
      launchrock: {
        email: process.env.LAUNCHCHIMP_LR_EMAIL,
        password: process.env.LAUNCHCHIMP_LR_PASSWORD,
        project: process.env.LAUNCHCHIMP_LR_PROJECT
      },
      mailchimp: {
        apiKey: process.env.LAUNCHCHIMP_MC_API_KEY,
        listName: process.env.LAUNCHCHIMP_MC_LIST
      }
    };

    service.poll(options);
  }
}

/**
 * Creates the specified number of workers.
 * @param  {Number} n Number of workers to create.
 */
function createWorkers(n) {
  while (n-- > 0) {
    createWorker();
  }
}

/**
 * Kills all workers with the given signal.
 * Also removes all event listeners from workers before sending the signal
 * to prevent respawning.
 * @param  {Number} signal
 */
function killAllWorkers(signal) {
  var uniqueID,
      worker;

  for (uniqueID in cluster.workers) {
    if (cluster.workers.hasOwnProperty(uniqueID)) {
      worker = cluster.workers[uniqueID];
      worker.removeAllListeners();
      worker.process.kill(signal);
    }
  }
}

/**
 * Restarts the workers.
 */
process.on('SIGHUP', function () {
  killAllWorkers('SIGTERM');
  createWorkers(1);
});

/**
 * Gracefully Shuts down the workers.
 */
process.on('SIGTERM', function () {
  killAllWorkers('SIGTERM');
});

createWorkers(1);
